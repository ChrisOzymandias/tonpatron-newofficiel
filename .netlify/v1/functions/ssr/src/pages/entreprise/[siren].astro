---
import { supabase } from '../../utils/supabaseClient';

export async function get({ params, request }) {
  const siren = params.siren;
  const url = new URL(request.url);
  let nom = url.searchParams.get('nom') || '';
  let adresse = url.searchParams.get('adresse') || '';
  const categorie = url.searchParams.get('categorie') || '';
  const date_creation = url.searchParams.get('date_creation') || '';
  const activite = url.searchParams.get('activite') || '';
  const effectif = url.searchParams.get('effectif') || '';
  const code_postal = url.searchParams.get('code_postal') || '';
  const commune = url.searchParams.get('commune') || '';
  const nom_commercial = url.searchParams.get('nom_commercial') || '';
  const etablissements = url.searchParams.get('etablissements') || '';
  const etat = url.searchParams.get('etat') || '';

  // Récupérer données API et écraser tous les champs si disponibles
  try {
    const res = await fetch(`https://recherche-entreprises.api.gouv.fr/entreprises/${siren}`);
    if (res.ok) {
      const data = await res.json();
      nom = data.nom_raison_sociale || data.nom_complet || data.nom || nom;
      if (data.siege) {
        adresse = data.siege.adresse || [
          data.siege.adresse_ligne_1,
          data.siege.adresse_ligne_2,
          data.siege.adresse_ligne_3,
          data.siege.code_postal,
          data.siege.libelle_commune,
          data.siege.pays
        ].filter(Boolean).join(', ');
      }
      // Écraser tous les champs enrichis si présents
      categorie = data.categorie_entreprise || categorie;
      date_creation = data.date_creation || date_creation;
      activite = data.activite_principale || activite;
      effectif = data.tranche_effectif_salarie || effectif;
      nom_commercial = (data.siege && data.siege.nom_commercial) || nom_commercial;
      code_postal = (data.siege && data.siege.code_postal) || code_postal;
      commune = (data.siege && data.siege.libelle_commune) || commune;
      etablissements = data.nombre_etablissements || etablissements;
      etat = data.etat_administratif || etat;
    }
  } catch (e) {
    console.error('API error:', e);
  }

  // Upsert automatique Supabase adapté au schéma réel
  try {
    const { error } = await supabase
      .from('entreprises')
      .upsert([
        {
          siren,
          nom: nom,
          adresse: adresse,
          code_postal: code_postal,
          ville: commune, // Mapping: API "commune" -> table "ville"
          pays: 'France', // Valeur par défaut si non fournie
          secteur: categorie || null, // Mapping: API "categorie" -> table "secteur"
          categorie_juridique: null,
          date_creation: date_creation,
          site_web: null,
          logo_url: null,
          effectif: effectif ? parseInt(effectif) : null,
          note_moyenne: null, // calculée plus tard
          nombre_avis: null, // calculé plus tard
          historique: null, // à remplir si besoin
          date_derniere_mise_a_jour: new Date().toISOString(),
          created_at: new Date().toISOString()
        }
      ], { onConflict: 'siren' });
    if (error) {
      console.error('SUPABASE UPSERT ERROR:', error);
    }
  } catch (e) {
    console.error('Supabase upsert exception:', e);
  }

  return {
    props: { siren, nom, adresse, categorie, date_creation, activite, effectif, code_postal, commune, nom_commercial, etablissements, etat }
  };
}
---
<html lang="fr">
  <head>
    <meta charset="utf-8" />
    <title>{Astro.props.nom ? `Entreprise ${Astro.props.nom} (SIREN ${Astro.props.siren})` : `Entreprise SIREN ${Astro.props.siren}`}</title>
    <meta name="description" content={Astro.props.nom ? `Découvrez les avis et informations sur ${Astro.props.nom} (SIREN ${Astro.props.siren}). Adresse : ${Astro.props.adresse}` : `Fiche entreprise SIREN ${Astro.props.siren} sur TonPatron.`} />
    <!-- Open Graph SEO -->
    <meta property="og:type" content="website" />
    <meta property="og:title" content={Astro.props.nom ? `Entreprise ${Astro.props.nom} (SIREN ${Astro.props.siren})` : `Entreprise SIREN ${Astro.props.siren}`}/>
    <meta property="og:description" content={Astro.props.nom ? `Découvrez les avis et informations sur ${Astro.props.nom} (SIREN ${Astro.props.siren}). Adresse : ${Astro.props.adresse}` : `Fiche entreprise SIREN ${Astro.props.siren} sur TonPatron.`}/>
    <meta property="og:url" content={`https://tonpatron.fr/entreprise/${Astro.props.siren}`}/>
    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={Astro.props.nom ? `Entreprise ${Astro.props.nom} (SIREN ${Astro.props.siren})` : `Entreprise SIREN ${Astro.props.siren}`}/>
    <meta name="twitter:description" content={Astro.props.nom ? `Découvrez les avis et informations sur ${Astro.props.nom} (SIREN ${Astro.props.siren}). Adresse : ${Astro.props.adresse}` : `Fiche entreprise SIREN ${Astro.props.siren} sur TonPatron.`}/>
    <!-- Schema.org JSON-LD -->
    <script type="application/ld+json">{JSON.stringify({
      '@context': 'https://schema.org',
      '@type': 'Organization',
      'name': Astro.props.nom || `SIREN ${Astro.props.siren}`,
      'address': Astro.props.adresse || undefined,
      'identifier': {
        '@type': 'PropertyValue',
        'propertyID': 'SIREN',
        'value': Astro.props.siren
      }
    })}</script>
  </head>
  <body>
    <main class="max-w-xl mx-auto bg-white rounded-xl shadow-lg p-8 mt-16 mb-12">
      {Astro.props.nom ? (
        <>
          <h1 class="text-3xl font-extrabold text-blue-700 mb-4">{Astro.props.nom}</h1>
          <div class="mb-4 flex flex-col gap-1">
            <div class="text-lg text-gray-700">{Astro.props.adresse}</div>
            <div class="flex flex-wrap gap-2 mt-2">
              <span class="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-xs font-semibold">SIREN : {Astro.props.siren}</span>
              {Astro.props.nom_commercial && <span class="bg-green-100 text-green-800 px-3 py-1 rounded-full text-xs font-semibold">Nom commercial : {Astro.props.nom_commercial}</span>}
              {Astro.props.categorie && <span class="bg-yellow-100 text-yellow-800 px-3 py-1 rounded-full text-xs font-semibold">Catégorie : {Astro.props.categorie}</span>}
              {Astro.props.date_creation && <span class="bg-gray-100 text-gray-800 px-3 py-1 rounded-full text-xs font-semibold">Créée le : {Astro.props.date_creation}</span>}
              {Astro.props.activite && <span class="bg-purple-100 text-purple-800 px-3 py-1 rounded-full text-xs font-semibold">APE : {Astro.props.activite}</span>}
              {Astro.props.effectif && <span class="bg-pink-100 text-pink-800 px-3 py-1 rounded-full text-xs font-semibold">Effectif : {Astro.props.effectif}</span>}
              {Astro.props.etablissements && <span class="bg-indigo-100 text-indigo-800 px-3 py-1 rounded-full text-xs font-semibold">Établissements : {Astro.props.etablissements}</span>}
              {Astro.props.etat && <span class="bg-red-100 text-red-800 px-3 py-1 rounded-full text-xs font-semibold">Statut : {Astro.props.etat === 'A' ? 'Actif' : 'Cessé'}</span>}
              {Astro.props.code_postal && <span class="bg-gray-200 text-gray-700 px-3 py-1 rounded-full text-xs font-semibold">CP : {Astro.props.code_postal}</span>}
              {Astro.props.commune && <span class="bg-gray-200 text-gray-700 px-3 py-1 rounded-full text-xs font-semibold">Commune : {Astro.props.commune}</span>}
            </div>
          </div>
          <h2 class="text-xl font-bold text-gray-900 mt-8 mb-3">Avis sur l'entreprise</h2>
          <!-- Section des avis à ajouter ici -->
        </>
      ) : (
        <section class="text-center">
          <h1 class="text-3xl font-extrabold text-red-700 mb-4">Entreprise introuvable</h1>
          <p class="text-gray-700">Aucune donnée pour le SIREN {Astro.props.siren}</p>
          <a href={`/entreprise/creer?siren=${Astro.props.siren}`} class="mt-6 inline-block px-5 py-3 bg-blue-600 text-white rounded-lg">Créer une fiche</a>
        </section>
      )}
    </main>
  </body>
</html>
